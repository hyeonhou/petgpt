const community_edit = {
    contextPath: '',
    boardKey: null,
    initialContent: '',
    initialImageUrl: '',

    initSummernote: function () {
        $('#summernote').summernote({
            lang: 'ko-KR',
            height: 350,
            placeholder: '내용을 입력하세요.',
            toolbar: [
                ['style', ['style']],
                ['font', ['bold', 'underline', 'clear']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['table', ['table']],
                ['insert', ['link', 'picture']],
                ['view', ['fullscreen', 'codeview', 'help']]
            ],
            callbacks: {
                onImageUpload: (files) => {
                    for (let i = 0; i < files.length; i++) {
                        this.uploadImage(files[i]);
                    }
                }
            }
        });
        // Summernote 내용 초기화
        $('#summernote').summernote('code', this.initialContent);
    },

    uploadImage: function (file) {
        const formData = new FormData();
        formData.append('file', file);

        $.ajax({
            url: this.contextPath + '/community/upload/image',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                response.imageUrl = community_edit.contextPath + response.imageUrl;
                $('#summernote').summernote('insertImage', response.imageUrl);
            },
            error: function (xhr) {
                console.error('이미지 업로드 실패:', xhr);
                alert('이미지 업로드에 실패했습니다.');
            }
        });
    },

    setupThumbnailHandling: function () {
        const initialImageUrl = this.initialImageUrl;
        console.log("Initial Image URL from data attribute:", initialImageUrl);

        let contextAwareImageUrl = '';
        if (initialImageUrl && initialImageUrl.startsWith('/')) {
            contextAwareImageUrl = this.contextPath + initialImageUrl;
        } else if (initialImageUrl) {
            contextAwareImageUrl = initialImageUrl;
        }
        console.log("Context Aware Image URL (Generated by JS):", contextAwareImageUrl);

        const previewContainer = $('#thumbnailPreview');
        const previewItem = previewContainer.find('.image-preview-item');
        const previewImage = $('#thumbnailImagePreview');
        const fileInput = $('#thumbnailImage');
        const hiddenInput = $('#boardImgHidden');

        function displayInitialImage() {
            if (initialImageUrl && initialImageUrl !== 'null' && initialImageUrl.trim() !== '') {
                previewImage.attr('src', contextAwareImageUrl).attr('alt', '현재 썸네일');
                previewItem.show();
                hiddenInput.val(initialImageUrl);
                console.log("초기 썸네일 표시:", contextAwareImageUrl);
            } else {
                previewItem.hide();
                console.log("No initial image URL found or it was 'null' or empty.");
            }
        }

        displayInitialImage();

        // 파일 선택 시 미리보기 업데이트
        fileInput.change(function () {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    previewImage.attr('src', e.target.result).attr('alt', '새 썸네일 미리보기');
                    previewItem.show();
                    hiddenInput.val('');
                    console.log("새 썸네일 미리보기 표시");
                }
                reader.readAsDataURL(file);
            } else {
                displayInitialImage();
                console.log("파일 선택 취소, 초기 상태 복원");
            }
        });

        // 삭제 버튼 클릭 시
        $(document).on('click', '.remove-thumbnail-btn', function () {
            previewItem.hide(); // 미리보기 숨기기
            previewImage.attr('src', '').attr('alt', '썸네일 미리보기'); // src 초기화
            fileInput.val(''); // 파일 입력 초기화
            hiddenInput.val('removed'); // 삭제 상태 표시
            console.log("썸네일 이미지 삭제 버튼 클릭, hiddenInput:", hiddenInput.val());
        });
    },

    setupFormSubmit: function () {
        $('#editPostForm').submit((e) => {
            e.preventDefault();

            const formData = new FormData();

            formData.append('boardTitle', $('input[name="boardTitle"]').val());
            formData.append('category', $('#boardCategory').val());
            formData.append('boardContent', $('#summernote').summernote('code'));

            const thumbnailFile = document.getElementById('thumbnailImage').files[0];
            const boardImgHiddenValue = $('#boardImgHidden').val();

            if (thumbnailFile) {
                // 새 파일이 있으면 첨부
                formData.append('thumbnailImage', thumbnailFile);
                console.log("새 썸네일 파일 첨부됨");
            } else if (boardImgHiddenValue === 'removed') {
                // 삭제 버튼이 눌렸으면 boardImg를 빈 값으로 설정하여 서버에 삭제 의도 전달
                formData.append('boardImg', '');
                console.log("썸네일 삭제 요청됨 (boardImg='')");
            }


            // 디버깅: FormData 내용 확인
            console.log("--- 전송할 FormData ---");
            for (let [key, value] of formData.entries()) {
                if (value instanceof File) {
                    console.log(`${key}: ${value.name} (File)`);
                } else {
                    console.log(`${key}: ${value}`);
                }
            }
            console.log("----------------------");


            $.ajax({
                url: `${this.contextPath}/community/post/${this.boardKey}`,
                type: 'PUT',
                data: formData,
                processData: false,
                contentType: false,
                dataType: 'json',
                success: (response) => {
                    if (response && response.redirectUrl) {
                        console.log('수정 성공, 리다이렉트:', response.redirectUrl);
                        alert(response.message || '게시글이 성공적으로 수정되었습니다.');
                        window.location.href = response.redirectUrl;
                    } else {
                        console.log('게시글 수정 성공 (redirectUrl 없음):', response);
                        alert(response.message || '게시글이 수정되었습니다.');
                        window.location.href = this.contextPath + '/community';
                    }
                },
                error: (xhr, status, error) => {
                    console.error('게시글 수정 요청 실패:', status, error, xhr);
                    let errorMessage = '게시글 수정 중 오류가 발생했습니다.';

                    if (xhr.status === 401 && xhr.responseJSON && xhr.responseJSON.redirectUrl) {
                        console.log('Unauthorized (401) detected, redirecting to:', xhr.responseJSON.redirectUrl);
                        window.location.href = xhr.responseJSON.redirectUrl;
                        return;
                    } else if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    } else if (xhr.status) {
                        errorMessage += ` (Status: ${xhr.status})`;
                    }

                    alert(errorMessage);
                }
            });
        });
    },

    init: function () {
        const dataDiv = $('#community-edit-data');
        this.contextPath = dataDiv.data('context-path') || '';
        this.boardKey = dataDiv.data('board-key');
        this.initialContent = dataDiv.data('initial-content') || '';
        this.initialImageUrl = dataDiv.data('initial-image-url') || '';

        console.log("Community Edit JS Initialized", {
            contextPath: this.contextPath,
            boardKey: this.boardKey,
            initialImageUrl: this.initialImageUrl
        });


        if (!this.boardKey) {
            console.error("Board key is missing!");
            alert("게시글 정보를 불러올 수 없습니다.");
            return;
        }

        this.initSummernote();
        this.setupThumbnailHandling();
        this.setupFormSubmit();
    }
};

$(document).ready(function () {
    community_edit.init();
});