<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

            <!-- Popper.js CDN 추가 -->
            <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
            <!-- Summernote 에디터 관련 파일 -->
            <link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-bs4.min.css" rel="stylesheet">
            <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-bs4.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/lang/summernote-ko-KR.min.js"></script>

            <script>
                const community_edit = {
                    initSummernote: function () {
                        $('#summernote').summernote({
                            lang: 'ko-KR',
                            height: 350,
                            placeholder: '내용을 입력하세요.',
                            toolbar: [
                                ['style', ['style']],
                                ['font', ['bold', 'underline', 'clear']],
                                ['color', ['color']],
                                ['para', ['ul', 'ol', 'paragraph']],
                                ['table', ['table']],
                                ['insert', ['link', 'picture']],
                                ['view', ['fullscreen', 'codeview', 'help']]
                            ],
                            callbacks: {
                                onImageUpload: function (files) {
                                    for (let i = 0; i < files.length; i++) {
                                        community_edit.uploadImage(files[i]);
                                    }
                                }
                            }
                        });
                        // Summernote 내용 초기화
                        $('#summernote').summernote('code', '${board.boardContent}');
                    },

                    uploadImage: function (file) {
                        const formData = new FormData();
                        formData.append('file', file);

                        $.ajax({
                            url: '<c:url value="/community/upload/image"/>', // 이미지 업로드 경로는 동일하게 사용
                            type: 'POST',
                            data: formData,
                            processData: false,
                            contentType: false,
                            success: function (response) {
                                $('#summernote').summernote('insertImage', response.imageUrl);
                            },
                            error: function (xhr) {
                                console.error('이미지 업로드 실패:', xhr);
                                alert('이미지 업로드에 실패했습니다.');
                            }
                        });
                    },

                    setupThumbnailHandling: function () {
                        const initialImageUrl = '${board.boardImg}';
                        console.log("Initial Image URL from JSP:", initialImageUrl);

                        const contextAwareImageUrl = '<c:url value="${board.boardImg}"/>';
                        console.log("Context Aware Image URL (Generated by JSTL):", contextAwareImageUrl);

                        const previewContainer = $('#thumbnailPreview');
                        const previewItem = previewContainer.find('.image-preview-item');
                        const previewImage = $('#thumbnailImagePreview');
                        const fileInput = $('#thumbnailImage');
                        const hiddenInput = $('#boardImgHidden');

                        function displayInitialImage() {
                            if (initialImageUrl && initialImageUrl !== 'null' && initialImageUrl.trim() !== '') {
                                previewImage.attr('src', contextAwareImageUrl).attr('alt', '현재 썸네일');
                                previewItem.show();
                                hiddenInput.val(initialImageUrl);
                                console.log("초기 썸네일 표시:", contextAwareImageUrl);
                            } else {
                                previewItem.hide();
                                console.log("No initial image URL found or it was 'null' or empty.");
                            }
                        }

                        displayInitialImage();

                        // 파일 선택 시 미리보기 업데이트
                        fileInput.change(function () {
                            const file = this.files[0];
                            if (file) {
                                const reader = new FileReader();
                                reader.onload = function (e) {
                                    previewImage.attr('src', e.target.result).attr('alt', '새 썸네일 미리보기');
                                    previewItem.show();
                                    hiddenInput.val('');
                                    console.log("새 썸네일 미리보기 표시");
                                }
                                reader.readAsDataURL(file);
                            } else {
                                displayInitialImage();
                                console.log("파일 선택 취소, 초기 상태 복원");
                            }
                        });

                        // 삭제 버튼 클릭 시
                        $(document).on('click', '.remove-thumbnail-btn', function () {
                            previewItem.hide(); // 미리보기 숨기기
                            previewImage.attr('src', '').attr('alt', '썸네일 미리보기'); // src 초기화
                            fileInput.val(''); // 파일 입력 초기화
                            hiddenInput.val('removed'); // 삭제 상태 표시
                            console.log("썸네일 이미지 삭제 버튼 클릭, hiddenInput:", hiddenInput.val());
                        });
                    },

                    setupFormSubmit: function () {
                        $('#editPostForm').submit(function (e) {
                            e.preventDefault();

                            const formData = new FormData();
                            const boardKey = $('input[name="boardKey"]').val();

                            formData.append('boardTitle', $('input[name="boardTitle"]').val());
                            formData.append('category', $('#boardCategory').val());
                            formData.append('boardContent', $('#summernote').summernote('code'));

                            const thumbnailFile = document.getElementById('thumbnailImage').files[0];
                            const boardImgHiddenValue = $('#boardImgHidden').val();

                            if (thumbnailFile) {
                                // 새 파일이 있으면 첨부
                                formData.append('thumbnailImage', thumbnailFile);
                                console.log("새 썸네일 파일 첨부됨");
                            } else if (boardImgHiddenValue === 'removed') {
                                // 삭제 버튼이 눌렸으면 boardImg를 빈 값으로 설정하여 서버에 삭제 의도 전달
                                formData.append('boardImg', '');
                                console.log("썸네일 삭제 요청됨 (boardImg='')");
                            } else if (boardImgHiddenValue) {
                                // 새 파일 없고, 삭제도 안 눌렸고, 기존 이미지가 있었으면 해당 경로 유지 (서버에서 처리)
                                // formData.append('boardImg', boardImgHiddenValue); // 서버 로직에서 처리하므로 명시적으로 보낼 필요 없음
                                console.log("기존 썸네일 유지 요청됨 (boardImg 필드 보내지 않음)");
                            } else {
                                // 새 파일 없고, 삭제도 안 눌렸고, 기존 이미지도 없었으면 아무것도 안함 (boardImg 필드 없음)
                                console.log("썸네일 없음 (boardImg 필드 보내지 않음)");
                            }


                            // 디버깅: FormData 내용 확인
                            console.log("--- 전송할 FormData ---");
                            for (let [key, value] of formData.entries()) {
                                // 파일 객체는 직접 로깅하기 어려우므로 이름만 로깅
                                if (value instanceof File) {
                                    console.log(`${key}: ${value.name} (File)`);
                                } else {
                                    console.log(`${key}: ${value}`);
                                }
                            }
                            console.log("----------------------");


                            $.ajax({
                                url: `<c:url value='/community/post/'/>${boardKey}`, // PUT 요청 URL
                                type: 'PUT', // PUT 메소드 사용
                                data: formData,
                                processData: false,
                                contentType: false,
                                dataType: 'json',
                                success: function (response) {
                                    if (response && response.redirectUrl) {
                                        console.log('수정 성공, 리다이렉트:', response.redirectUrl);
                                        alert(response.message || '게시글이 성공적으로 수정되었습니다.');
                                        window.location.href = response.redirectUrl;
                                    } else {
                                        console.log('게시글 수정 성공 (redirectUrl 없음):', response);
                                        alert(response.message || '게시글이 수정되었습니다.');
                                        window.location.href = '<c:url value="/community"/>'; // fallback
                                    }
                                },
                                error: function (xhr, status, error) {
                                    console.error('게시글 수정 요청 실패:', status, error, xhr);
                                    let errorMessage = '게시글 수정 중 오류가 발생했습니다.';

                                    if (xhr.status === 401 && xhr.responseJSON && xhr.responseJSON.redirectUrl) {
                                        console.log('Unauthorized (401) detected, redirecting to:', xhr.responseJSON.redirectUrl);
                                        window.location.href = xhr.responseJSON.redirectUrl;
                                        return;
                                    } else if (xhr.responseJSON && xhr.responseJSON.message) {
                                        errorMessage = xhr.responseJSON.message;
                                    } else if (xhr.status) {
                                        errorMessage += ` (Status: ${xhr.status})`;
                                    }

                                    alert(errorMessage);
                                }
                            });
                        });
                    },

                    init: function () {
                        this.initSummernote();
                        this.setupThumbnailHandling();
                        this.setupFormSubmit();
                    }
                };

                $(document).ready(function () {
                    community_edit.init();
                });
            </script>

            <style>
                .community-write-container {
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 30px 20px;
                }

                .community-write.spad {
                    padding-top: 50px;
                }

                .form-group {
                    margin-bottom: 15px;
                }

                .form-title {
                    width: 100%;
                    padding: 12px 15px;
                    border: 1px solid #e1e1e1;
                    border-radius: 4px;
                    font-size: 16px;
                }

                .form-content {
                    width: 100%;
                    padding: 15px;
                    border: 1px solid #e1e1e1;
                    border-radius: 4px;
                    min-height: 350px;
                    resize: vertical;
                    font-size: 15px;
                    line-height: 1.6;
                }

                .btn-wrapper {
                    display: flex;
                    justify-content: center;
                    gap: 10px;
                    margin-top: 30px;
                }

                .btn-submit {
                    background-color: #111111;
                    color: #ffffff;
                    padding: 12px 30px;
                    border: none;
                    font-weight: 600;
                    cursor: pointer;
                    transition: background-color 0.3s;
                }

                .btn-submit:hover {
                    background-color: #333333;
                }

                .btn-cancel {
                    background-color: #f0f0f0;
                    color: #333333;
                    padding: 12px 30px;
                    border: 1px solid #e1e1e1;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.3s;
                }

                .btn-cancel:hover {
                    background-color: #e0e0e0;
                }

                .form-select {
                    width: 100%;
                    padding: 8px 15px;
                    border: 1px solid #e1e1e1;
                    border-radius: 4px;
                    font-size: 16px;
                    appearance: none;
                    background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24'%3E%3Cpath fill='%23333' d='M7 10l5 5 5-5H7z'/%3E%3C/svg%3E");
                    background-repeat: no-repeat;
                    background-position: right 15px center;
                    position: relative;
                    z-index: 150;
                    line-height: 1.5;
                    display: flex;
                    align-items: center;
                    height: 42px;
                }

                .image-preview-container {
                    display: flex;
                    flex-wrap: wrap;
                    gap: 10px;
                    margin-top: 10px;
                }

                .image-preview-item {
                    position: relative;
                    width: 100px;
                    height: 100px;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    overflow: hidden;
                }

                .image-preview-item img {
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                }

                .image-preview-item .remove-thumbnail-btn {
                    position: absolute;
                    top: 5px;
                    right: 5px;
                    width: 20px;
                    height: 20px;
                    background-color: rgba(0, 0, 0, 0.5);
                    color: white;
                    border: none;
                    border-radius: 50%;
                    cursor: pointer;
                    font-size: 12px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }

                .note-editor {
                    margin-top: 20px !important;
                }

                .note-editor.note-frame {
                    position: relative;
                    z-index: 10;
                }

                .category-group {
                    margin-bottom: 30px !important;
                }
            </style>

            <section class="breadcrumb-option">
                <div class="container">
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="breadcrumb__text">
                                <h4>게시글 수정</h4>
                                <div class="breadcrumb__links">
                                    <a href="<c:url value='/'/>">Home</a>
                                    <a href="<c:url value='/community'/>">커뮤니티</a>
                                    <span>게시글 수정</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <section class="community-write spad">
                <div class="container">
                    <div class="community-write-container">
                        <form id="editPostForm" enctype="multipart/form-data">
                            <input type="hidden" name="boardKey" value="${board.boardKey}">
                            <div class="form-group">
                                <input type="text" class="form-title" name="boardTitle" placeholder="제목을 입력해 주세요."
                                    value="${board.boardTitle}" required>
                            </div>

                            <div class="form-group category-group">
                                <select class="form-select" name="category" id="boardCategory" required>
                                    <option value="" disabled ${board.category==null ? 'selected' : '' }>카테고리를 선택해주세요
                                    </option>
                                    <option value="notice" ${board.category=='notice' ? 'selected' : '' }>공지사항
                                    </option>
                                    <option value="free" ${board.category=='free' ? 'selected' : '' }>자유게시판
                                    </option>
                                    <option value="show" ${board.category=='show' ? 'selected' : '' }>펫자랑게시판
                                    </option>
                                </select>
                            </div>

                            <div style="height: 15px; clear: both;"></div>

                            <div class="form-group">
                                <textarea class="form-content" name="boardContent" id="summernote"
                                    placeholder="내용을 입력하세요."></textarea>
                            </div>

                            <div class="form-group">
                                <label for="thumbnailImage">대표 이미지 첨부 (선택)</label>
                                <input type="file" class="form-control-file" id="thumbnailImage" name="thumbnailImage"
                                    accept="image/*">
                                <div id="thumbnailPreview" class="image-preview-container">
                                    <div class="image-preview-item" style="display: none;">
                                        <img id="thumbnailImagePreview" src="" alt="썸네일 미리보기">
                                        <button type="button" class="remove-thumbnail-btn">×</button>
                                    </div>
                                </div>
                                <input type="hidden" id="boardImgHidden" name="boardImg">
                                <small class="text-muted">* 기존 이미지를 유지하려면 새 이미지를 선택하지 마세요. 이미지를 삭제하려면 미리보기의 'X' 버튼을
                                    누르세요.</small>
                            </div>

                            <div class="btn-wrapper">
                                <button type="submit" class="btn-submit">수정 완료</button>
                                <a href="<c:url value='/community/detail?id=${board.boardKey}'/>"
                                    class="btn-cancel">취소</a>
                            </div>
                        </form>
                    </div>
                </div>
            </section>